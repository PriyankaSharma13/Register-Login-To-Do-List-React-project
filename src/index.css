/* body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
} */

/* --------------------------------------------------------------- */
/* 
import React from "react";
import { useFormik } from "formik";
import * as Yup from "yup";
import styles from "../css/Register.module.css";
import { useNavigate } from "react-router-dom";

const RegisterPage = () => {
  const navigate = useNavigate();

  const validationSchema = Yup.object({
    userName: Yup.string().trim().required("Full name is required!"),
    email: Yup.string()
      .email("Please enter a valid email address!")
      .required("Email is required!"),
    password: Yup.string()
      .min(6, "Password must be at least 6 characters!")
      .required("Password is required!"),
  });

  const formik = useFormik({
    initialValues: {
      userName: "",
      email: "",
      password: "",
    },
    validationSchema,
    onSubmit: (values, { resetForm, setStatus }) => {
      console.log("User Data:", values);

      const existingUsers = JSON.parse(localStorage.getItem("users")) || [];
      const userExists = existingUsers.some(
        (user) => user.email === values.email
      );

      if (userExists) {
        setStatus({ error: "User already registered with this email!" });
        return;
      }

      const updatedUsers = [...existingUsers, values];
      localStorage.setItem("users", JSON.stringify(updatedUsers));

      setStatus({ success: "Registration successful!" });
      resetForm();

      setTimeout(() => {
        navigate("/login");
      }, 1500);
    },
  });

  return (
    <div className={styles.page}>
      <div className={styles.circles}></div>

      <div className={styles.card}>
        <h2 className={styles.title}>Create Your Account</h2>
        <p className={styles.subtitle}>Join us and explore new opportunities âœ¨</p>

        <form onSubmit={formik.handleSubmit} className={styles.form}>
          <label className={styles.label}>Full Name</label>
          <input
            type="text"
            name="userName"
            placeholder="Enter your full name"
            value={formik.values.userName}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            className={styles.input}
          />
          {formik.touched.userName && formik.errors.userName && (
            <p className={styles.error}>{formik.errors.userName}</p>
          )}

          <label className={styles.label}>Email Address</label>
          <input
            type="text"
            name="email"
            placeholder="Enter your email"
            value={formik.values.email}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            className={styles.input}
          />
          {formik.touched.email && formik.errors.email && (
            <p className={styles.error}>{formik.errors.email}</p>
          )}

          <label className={styles.label}>Password</label>
          <input
            type="password"
            name="password"
            placeholder="Enter your password"
            value={formik.values.password}
            onChange={formik.handleChange}
            onBlur={formik.handleBlur}
            className={styles.input}
          />
          {formik.touched.password && formik.errors.password && (
            <p className={styles.error}>{formik.errors.password}</p>
          )}

          <div className={styles.checkboxContainer}>
            <input type="checkbox" id="remember" />
            <label htmlFor="remember">Remember me</label>
          </div>

          <button type="submit" className={styles.button}>
            Register
          </button>

          {formik.status && formik.status.error && (
            <p className={styles.error}>{formik.status.error}</p>
          )}
          {formik.status && formik.status.success && (
            <p className={styles.message}>{formik.status.success}</p>
          )}

          <p className={styles.loginLink}>
            Already have an account?{" "}
            <span onClick={() => navigate("/login")}>Login</span>
          </p>
        </form>
      </div>
    </div>
  );
};

export default RegisterPage; */

/* ------------------------------------------------------ */
/* * {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
}

.page {
  position: relative;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background: linear-gradient(135deg, #4f46e5, #9333ea);
  overflow: hidden;
}

.circles::before,
.circles::after {
  content: "";
  position: absolute;
  width: 300px;
  height: 300px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  animation: float 6s ease-in-out infinite alternate;
}

.circles::before {
  top: 15%;
  left: 10%;
}

.circles::after {
  bottom: 10%;
  right: 15%;
  animation-delay: 3s;
}

@keyframes float {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-30px);
  }
}

.card {
  width: 420px;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(15px);
  border-radius: 16px;
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
  padding: 40px;
  z-index: 10;
  animation: fadeIn 0.8s ease forwards;
}

@keyframes fadeIn {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.title {
  text-align: center;
  color: #fff;
  font-size: 28px;
  margin-bottom: 8px;
}

.subtitle {
  text-align: center;
  color: #e0e0e0;
  margin-bottom: 25px;
  font-size: 14px;
}

.form {
  display: flex;
  flex-direction: column;
}

.label {
  color: #f3f3f3;
  margin-bottom: 6px;
  font-size: 14px;
  font-weight: 500;
}

.input {
  padding: 10px 12px;
  border: none;
  border-radius: 8px;
  margin-bottom: 16px;
  font-size: 14px;
  outline: none;
  background: rgba(255, 255, 255, 0.9);
  transition: all 0.3s ease;
}

.input:focus {
  background: #fff;
  box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.3);
}

.checkboxContainer {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 16px;
  color: #e0e0e0;
  font-size: 14px;
}



.button {
  background: linear-gradient(135deg, #2563eb, #1d4ed8);
  color: #ffffff;
  padding: 12px;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  margin-top: 18px;
  transition: 0.3s ease;
  box-shadow: 0 3px 8px rgba(37, 99, 235, 0.3);
}

.button:hover {
  background: linear-gradient(135deg, #1d4ed8, #1e40af);
  box-shadow: 0 5px 12px rgba(37, 99, 235, 0.4);
}

.error {
  color: #dc2626;
  background: #fee2e2;
  padding: 8px;
  border-radius: 6px;
  font-size: 13px;
  margin-top: 4px;
  border-left: 3px solid #dc2626;
}
.message {
  color: #a7f3d0;
  text-align: center;
  margin-top: 10px;
  font-weight: 500;
}

.loginLink {
  text-align: center;
  margin-top: 18px;
  color: #e0e0e0;
  font-size: 14px;
}

.loginLink span {
  color: #fff;
  font-weight: 600;
  cursor: pointer;
}

.loginLink span:hover {
  text-decoration: underline;
}

@media (max-width: 480px) {
  .card {
    width: 90%;
    padding: 30px;
  }
  .title {
    font-size: 24px;
  }
}
 */
